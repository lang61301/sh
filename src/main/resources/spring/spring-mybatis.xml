<?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
 http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
 http://www.springframework.org/schema/tx 
 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
 http://www.springframework.org/schema/aop 
 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
 ">
 
     <!-- JNDI方式配置数据源 -->
     <!-- 
     <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
          <property name="jndiName" value="${jndiName}"></property> 
     </bean> 
     -->
 
     <!-- 配置数据源 -->
     <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
         <property name="url" value="${jdbc_url}" />
         <property name="username" value="${jdbc_username}" />
         <property name="password" value="${jdbc_password}" />
 
         <!-- 初始化连接大小 -->
         <property name="initialSize" value="0" />
         <!-- 连接池最大使用连接数量 -->
         <property name="maxActive" value="20" />
         <!-- 连接池最大空闲 -->
         <property name="maxIdle" value="20" />
         <!-- 连接池最小空闲 -->
         <property name="minIdle" value="0" />
         <!-- 获取连接最大等待时间 -->
         <property name="maxWait" value="60000" />
 
         <!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
 
         <property name="validationQuery" value="${validationQuery}" />
         <property name="testOnBorrow" value="false" />
         <property name="testOnReturn" value="false" />
         <property name="testWhileIdle" value="true" />
 
         <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="60000" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="25200000" />
 
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="true" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="1800" />
         <!-- 关闭abanded连接时输出错误日志 -->
         <property name="logAbandoned" value="true" />
 
         <!-- 监控数据库 -->
         <!-- <property name="filters" value="stat" /> -->
         <property name="filters" value="mergeStat" />
     </bean>
 
     <!-- 配置mybatis session工厂 -->
     <bean id="sqlSessionFactory" class="me.paddingdun.component.factory.MyBatisSessionFactory">
         <property name="dataSource" ref="dataSource" />
         <property name="mapperLocations" value="classpath:mybatis/mysql/**/*.xml" />
     </bean>
     
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="me.paddingdun.dao" />
		<property name="annotationClass"
			value="org.springframework.stereotype.Repository" />
	</bean>
 
     <!-- 配置事务管理器 -->
     <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource" />
         <!--  抛出异常主事务回滚 -->
		<!-- property name="globalRollbackOnParticipationFailure" value="false"></property--> 
     </bean>
 
     <!-- 注解方式配置事物 -->
     <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
 
     <!-- 拦截器方式配置事物 -->
     <!-- 	tx:method 默认设置: 
     		事务传播设置是 REQUIRED (propagation="REQUIRED")
     				REQUIRED: 加入当前已有事务；只有当前没有事务才起一个新的事务, 可以在service中调用另外一个service并且保证事务;
     				SUPPORTS: 如果当前在事务中，即以事务的形式运行，如果当前不在一个事务中，那么就以非事务的形式运行;
     				MANDATORY:必须在一个事务中运行。也就是说，只能被一个父事务调用。否则，就要抛出异常;
     				REQUIRES_NEW:重新起事务,已有事务将会被挂起,等该事务结束后, 原事务再继续执行;
     				NOT_SUPPORTED:当前不支持事务。
     				NEVER:不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER，那么ServiceB.methodB就要抛出异常了
     				NESTED:暂时不理解(只支持jdbc, ibatis);
			隔离级别是 DEFAULT  (isolation="DEFAULT")
			事务是 读/写                         (read-only="false")
			事务超时默认是依赖于事务系统的，或者事务超时没有被支持,以秒为单位。 (timeout="-1")
			任何 RuntimeException 将触发事务回滚，但是任何 checked Exception 将不触发事务回滚, 多异常以逗号分开; (rollback-for=不设置该属性  ; no-rollback-for=不设置该属性)  
			 -->
     <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
         <tx:attributes>
             <!-- 以如下关键字开头的方法使用事物 -->
             <tx:method name="add*" />
             <tx:method name="save*"/>
             <tx:method name="update*" />
             <tx:method name="modify*" />
             <tx:method name="edit*" />
             <tx:method name="delete*" />
             <tx:method name="remove*" />
             <!-- 以如下关键字开头的方法不使用事物 -->
             <tx:method name="get*" propagation="SUPPORTS" />
             <tx:method name="find*" propagation="SUPPORTS" />
             <tx:method name="load*" propagation="SUPPORTS" />
             <tx:method name="search*" propagation="SUPPORTS" />
             <tx:method name="datagrid*" propagation="SUPPORTS" />
             <!-- 其他方法不使用事物 -->
             <tx:method name="*" propagation="REQUIRED" />
         </tx:attributes>
     </tx:advice>
     <!-- 切面，将事物用在哪些对象上 -->
     <aop:config>
     <!-- 	   第一个 * —— 通配 任意返回值类型
			   第二个 * —— 通配 包me.paddingdun.service下的任意class
			   第三个 * —— 通配 包me.paddingdun.service下的任意class的任意方法
			   第 四个 * —— 
			  .. —— 通配 方法可以有0个或多个参数  -->
         <aop:pointcut id="transactionPointcut" expression="execution(* me.paddingdun.service.*..*(..))" />
         <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
     </aop:config>
     
    <!-- start log, 实现log4j的appender,异步记录日志 -->
    <!-- 已经通过注解实现AsynchronousMyBatisAppender -->
    <!-- bean id="AsynchronousMyBatisAppender" class="me.paddingdun.component.log.log4j.appender.AsynchronousMyBatisAppender" init-method="initialize" destroy-method="shutdown">
        <property name="transactionTemplate" ref="transactionTemplate" />
        <property name="sysLogDao" ref="sysLogDao" />
        <property name="loggingEventClass" value="me.paddingdun.data.SysLog"/>
    </bean-->
    
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"> 
      <property name="transactionManager"> 
        <ref bean="transactionManager"/> 
      </property> 
    </bean>
    <!-- end log --> 
 </beans>